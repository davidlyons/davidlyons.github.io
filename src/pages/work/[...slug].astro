---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import FormattedDate from '@/components/FormattedDate.astro';
import { components } from '@/components/mdx/index.astro';
import { iconMap } from '@/consts';
import { Icon } from 'astro-icon/components';

// This is a dynamic route that generates a page for every Markdown file in src/content/work/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const work = await getCollection('work');
  return work.map((entry) => ({
    params: { slug: entry.id },
    props: entry,
  }));
}

type Props = CollectionEntry<'work'>;

const entry = Astro.props;
const { title, description, pubDate, tags } = entry.data;
const { Content } = await render(entry);

// Get all entries in current category for prev/next arrow navigation
const projects = (await getCollection('work'))
  .filter((project) => project.data.category === entry.data.category)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const currentIndex = projects.findIndex(({ id }) => id === entry.id);
const prevEntry = projects[(currentIndex - 1 + projects.length) % projects.length];
const nextEntry = projects[(currentIndex + 1) % projects.length];
---

<BaseLayout {...entry.data}>
  <div class="grid-cols-12 lg:grid">
    <div class="col-span-3">
      <div class="sticky top-12">
        <!-- Previous / Next arrows -->
        <div class="mb-7 flex items-center gap-2">
          {
            prevEntry && (
              <a
                href={`/work/${prevEntry.id}`}
                aria-label="Previous"
                class="py-1 pr-3 pl-1 opacity-60 transition-opacity hover:opacity-100 dark:text-white"
              >
                <Icon name="arrow-left" size={20} />
              </a>
            )
          }
          <span class="w-12 text-center opacity-60">
            {`${currentIndex + 1} / ${projects.length}`}
          </span>
          {
            nextEntry && (
              <a
                href={`/work/${nextEntry.id}`}
                aria-label="Next"
                class="px-3 py-1 opacity-60 transition-opacity hover:opacity-100 dark:text-white"
              >
                <Icon name="arrow-right" size={20} />
              </a>
            )
          }
        </div>

        <h1 class="mb-1 text-3xl dark:text-white">{title}</h1>
        <p class="opacity-60">
          <FormattedDate date={pubDate} />
        </p>
        {description && <p class="mb-12 text-pretty">{description}</p>}

        <!-- badges -->
        <h2 class="mb-4 text-lg dark:text-white">Tools used</h2>
        <ul class="mb-6 flex list-none flex-wrap gap-2.5">
          {
            tags.map((tag) => (
              <li class="leading-none">
                <span class="inline-flex items-center rounded-md px-2 py-1 text-xs font-medium dark:bg-gray-600 dark:text-white">
                  {iconMap[tag] && <Icon name={iconMap[tag]} size={16} class="me-2" />} {tag}
                </span>
              </li>
            ))
          }
        </ul>
      </div>
    </div>

    <div class="col-span-8 col-start-5">
      <Content components={components} />
    </div>
  </div>
</BaseLayout>
